(define (newline)
  (write-char #\newline))
(define (write x)
  (define (write-vector-inner v i)
    (write (vector-ref v i))
    (if (< (+ i 1) (vector-length v))
        (begin
          (write-char #\space)
          (write-vector-inner v (+ i 1)))
        #f)
  )
  (if (pair? x)
      (begin
        (write-char #\openparen)
        (write (car x))
        (display " . ")
        (write (cdr x))
        (write-char #\closeparen))
  (if (eq? x #t)
      (display "#t")
  (if (eq? x #f)
      (display "#f")
  (if (eq? x '())
      (display "()")
  (if (symbol? x)
      (display (symbol->string x))
  (if (string? x)
      (begin
        (write-char #\")
        (display x)
        (write-char #\"))
  (if (number? x)
      (display (number->string x))
  (if (char? x)
      (begin
        (write-char #\#)
        (write-char #\\)
        (write-char x))
  (if (procedure? x)
      (display "<procedure>")
  (if (vector? x)
      (begin
        (write-char #\#)
        (write-char #\openparen)
        (if (= (vector-length x) 0)
            #f
            (write-vector-inner x 0))
        (write-char #\closeparen))
  (display "<unknown>")))))))))))
)
(define (not x) (if x #f #t))
(define (null? x) (eq? x '()))

(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (cdar x) (cdr (car x)))
(define (cddr x) (cdr (cdr x)))

(define (caaar x) (car (car (car x))))
(define (caadr x) (car (car (cdr x))))
(define (cadar x) (car (cdr (car x))))
(define (caddr x) (car (cdr (cdr x))))
(define (cdaar x) (cdr (car (car x))))
(define (cdadr x) (cdr (car (cdr x))))
(define (cddar x) (cdr (cdr (car x))))
(define (cdddr x) (cdr (cdr (cdr x))))

(define (caaaar x) (car (car (car (car x)))))
(define (caaadr x) (car (car (car (cdr x)))))
(define (caadar x) (car (car (cdr (car x)))))
(define (caaddr x) (car (car (cdr (cdr x)))))
(define (cadaar x) (car (cdr (car (car x)))))
(define (cadadr x) (car (cdr (car (cdr x)))))
(define (caddar x) (car (cdr (cdr (car x)))))
(define (cadddr x) (car (cdr (cdr (cdr x)))))
(define (cdaaar x) (cdr (car (car (car x)))))
(define (cdaadr x) (cdr (car (car (cdr x)))))
(define (cdadar x) (cdr (car (cdr (car x)))))
(define (cdaddr x) (cdr (car (cdr (cdr x)))))
(define (cddaar x) (cdr (cdr (car (car x)))))
(define (cddadr x) (cdr (cdr (car (cdr x)))))
(define (cdddar x) (cdr (cdr (cdr (car x)))))
(define (cddddr x) (cdr (cdr (cdr (cdr x)))))
